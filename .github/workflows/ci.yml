name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Run dotnet tests
        run: |
          dotnet test
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Optimization: Filter to only check out essential files for CI to save time
          filter: tree:0
          # Fetch all history for Nx to correctly determine affected projects
          fetch-depth: 0

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: npx nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e-ci"
      # Cache node_modules using a recommended setup for Node
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      # Install all Node dependencies
      - run: npm ci --legacy-peer-deps

      # Install Playwright browser dependencies for E2E tests
      - run: npx playwright install --with-deps

      # Run the test tasks using Nx
      # The "-t" flag stands for "target"
      - run: npx nx run-many -t lint build # test e2e --> comment tests out until you learned how to write unit and e2e tests in Angular

      # Optional: Add self-healing CI with Nx Cloud to automatically fix failures
      - run: npx nx fix-ci
        if: always()